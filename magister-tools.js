/**
 * Magister Tools v1.0.0
 * <github URL>
 *
 * Copyright 2016 Jesse van der Pluijm
 * Licensed under MIT (https://git.io/magister-tools-license)
 *
 * This node.js module should make getting grades and other data from magister easier.
 */

/* ======================
 * Load our requirements.
 * ====================== */

var Magister = require('magister.js')

/* ======================
 *   The actual module:
 * ====================== */
module.exports = {
  /** ==========================================================================
   * @name magisterLogin
   * This function logs into magister using magisterJS.
   * @param {Object} input An object containing the data needed to login to magister.
   * @param {Function} input A callback function taking two parameters. -> err, magisterlogin
   * @param {Function} optional A function the program needs to excecute before trying to login to Magister.
   * For instance: logging something to the console indicating we're trying to log in.
   */
  magisterLogin: function (settings, callback, doFirst) {
    // If we need to do something before trying to log in we do it here.
    if (doFirst) doFirst();


    // Login to magister using settings as login-data.
    new Magister.Magister(settings).ready(function (err) {
      // Invoke callback when logged into magister. (if callback exists)
      if (callback) callback(err, this);
    });
  },

  /** ==========================================================================
   * @name fetchCurrentCourse
   * This function fetches the current course for the logged in user.
   * @param {?} input magisterlogin. (pass in `this` inside of .ready())
   * @param {function} input A callback function taking two parameters. -> err, currentcourse
   */
  fetchCurrentCourse: function (magisterlogin, callback) {
    /* Fetch current course using the magisterlogin. */
    magisterlogin.currentCourse(function (err, currentcourse) {
      // Invoke callback when done and pass along any errors or the currentcourse
      // (If callback exists)
      if (callback) callback(err, currentcourse)
    });
  },

  /** ==========================================================================
   * @name fetchGrades
   * This function fetches the grades for the course of the logged in user.
   * @param {Array} input course: A Course (like: 4 VWO E/M 14-15) (You can get the courses from magisterJS)
   * @param {Function} input A callback function taking two parameters. -> err, grades
   */
  fetchGrades: function (course, callback) {
    /* Fetch the grades using the course */
    course.grades(function (err, grades) {
      // Invoke callback when done and pass along any errors or the grades
      // (If callback exists)
      if (callback) callback(err, grades)
    });
  },

  /** ==========================================================================
   * @name getEndGrades
   * This function selects the endgrades from a list of grades.
   * @param {Array} input A list of all the grades (generated by MagisterJS)
   * @returns {Object} output An object structured like this:
   *  { subject: endGrade }
   *   // For instance...
   *   { en: '7.1', wb: '6.6', //etc....}
   */
   getEndGrades: function (grades) {
     /* Filter the grades and add them to an object if needed. */
     var returnObj = {};
     grades.forEach(function (grade) {
       // If grade's type is average grade.
       if (grade.type().isEnd()) {
         // Add value to the returnObj (key = class abbrevation)
         returnObj[grade.class().abbreviation] = grade.grade();
       }
     })
     return returnObj;
   }
}
